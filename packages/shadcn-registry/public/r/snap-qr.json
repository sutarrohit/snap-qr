{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "snap-qr",
  "type": "registry:hook",
  "title": "SnapQR — QR Code Generator",
  "description": "SnapQR is a lightweight and customizable React hook for generating stylish QR codes. It’s designed to work seamlessly with React based apps offering a simple API, live updates, and flexible download options.",
  "dependencies": [
    "qr-code-styling"
  ],
  "files": [
    {
      "path": "./src/hooks/useSnapQR.tsx",
      "content": "\"use client\";\r\n\r\nimport { useEffect, useRef, useState, ChangeEvent, useCallback, useMemo } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n/**\r\n * Type definitions for SnapQR QR Code Generator\r\n *\r\n * This file contains all TypeScript interfaces and type definitions\r\n * used by the SnapQR hook and components.\r\n */\r\nimport QRCodeStyling, {\r\n    DrawType,\r\n    TypeNumber,\r\n    Mode,\r\n    ErrorCorrectionLevel,\r\n    DotType,\r\n    CornerSquareType,\r\n    CornerDotType,\r\n    Options,\r\n    ShapeType,\r\n    FileExtension,\r\n    DownloadOptions,\r\n    ExtensionFunction\r\n} from \"qr-code-styling\";\r\n\r\nexport interface LayoutOptions {\r\n    type?: DrawType;\r\n    shape?: ShapeType;\r\n    width?: number;\r\n    height?: number;\r\n    margin?: number;\r\n    image?: string;\r\n    nodeCanvas?: Options[\"nodeCanvas\"];\r\n    jsdom?: Options[\"jsdom\"];\r\n}\r\n\r\nexport interface SnapQROptions {\r\n    layoutOptions?: LayoutOptions;\r\n    qrOptions?: Options[\"qrOptions\"];\r\n    imageOptions?: Options[\"imageOptions\"];\r\n    dotsOptions?: Options[\"dotsOptions\"];\r\n    cornersSquareOptions?: Options[\"cornersSquareOptions\"];\r\n    cornersDotOptions?: Options[\"cornersDotOptions\"];\r\n    backgroundOptions?: Options[\"backgroundOptions\"];\r\n}\r\n\r\nexport interface UseSnapQRReturn {\r\n    SnapQRComponent: React.FC<{ className?: string }>;\r\n    fileExt: FileExtension;\r\n    currentData: string;\r\n    error: string | null;\r\n    qrCodeInstance: QRCodeStyling | null;\r\n    onDataChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    onExtensionChange: (event: React.ChangeEvent<HTMLSelectElement>) => void;\r\n    onDownloadClick: (downloadOptions?: Partial<DownloadOptions> | string) => void;\r\n    updateData: (newData: string) => void;\r\n    updateOptions: (newOptions: Partial<SnapQROptions>) => void;\r\n    applyExtension: (extension: ExtensionFunction) => void;\r\n    deleteExtension: () => void;\r\n    getRawData: (extension?: FileExtension) => Promise<Blob | Buffer | null>;\r\n    appendToContainer: (container?: HTMLElement) => void;\r\n}\r\n\r\nexport interface SnapQRComponentProps {\r\n    data: string;\r\n    options?: SnapQROptions;\r\n    className?: string;\r\n    onDownload?: (extension: FileExtension) => void;\r\n}\r\n\r\nexport type {\r\n    DrawType,\r\n    TypeNumber,\r\n    Mode,\r\n    ErrorCorrectionLevel,\r\n    DotType,\r\n    CornerSquareType,\r\n    CornerDotType,\r\n    Options as QRCodeOptions,\r\n    ShapeType,\r\n    FileExtension\r\n};\r\n\r\n// =============================================================================\r\n\r\n/**\r\n * Constants and default configurations for SnapQR\r\n *\r\n * This file contains default options, images, and utility functions\r\n * used by the SnapQR hook and components.\r\n */\r\n\r\nexport const DEFAULT_OPTIONS: Partial<Options> = {\r\n    width: 300,\r\n    height: 300,\r\n    margin: 7,\r\n    qrOptions: {\r\n        typeNumber: 0,\r\n        mode: \"Byte\",\r\n        errorCorrectionLevel: \"H\"\r\n    },\r\n    imageOptions: {\r\n        hideBackgroundDots: true,\r\n        imageSize: 0.1,\r\n        margin: 3,\r\n        crossOrigin: \"anonymous\",\r\n        saveAsBlob: true\r\n    },\r\n    dotsOptions: {\r\n        color: \"#000000\",\r\n        type: \"dots\"\r\n    },\r\n    backgroundOptions: {\r\n        color: \"#ffffff\"\r\n    },\r\n    cornersSquareOptions: {\r\n        color: \"#222222\",\r\n        type: \"extra-rounded\"\r\n    },\r\n    cornersDotOptions: {\r\n        color: \"#222222\",\r\n        type: \"extra-rounded\"\r\n    }\r\n} as const;\r\n\r\nexport const DEFAULT_IMAGE = \"https://raw.githubusercontent.com/sutarrohit/snap-qr/main/public/paperdex.png\";\r\n\r\n// =============================================================================\r\n\r\n/**\r\n * React hook to create and manage a QR code using `qr-code-styling`.\r\n *\r\n * - Keeps an internal QRCodeStyling instance and a container ref for rendering.\r\n * - Exposes a small React component to place the QR on the page.\r\n * - Provides helpers for updating data/options, applying/removing extensions,\r\n *   downloading, and getting raw data (Blob/Buffer).\r\n *\r\n * @param initialData - initial string to encode into the QR code\r\n * @param initialOptions - optional initial SnapQROptions to configure appearance/behavior\r\n * @returns an object with component, instance, controls and helpers for the QR code\r\n */\r\nexport default function useSnapQR(initialData: string, initialOptions?: SnapQROptions): UseSnapQRReturn {\r\n    // --- State ---\r\n    const [currentData, setCurrentData] = useState(initialData);\r\n    const [fileExt, setFileExt] = useState<FileExtension>(\"svg\");\r\n    const [options, setOptions] = useState<SnapQROptions>(initialOptions || {});\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    // --- Refs ---\r\n    const qrCodeRef = useRef<QRCodeStyling | null>(null); // holds the active QRCodeStyling instance\r\n    const containerRef = useRef<HTMLDivElement>(null); // DOM container for display\r\n    const isInitialized = useRef(false); // ensure we only initialize once\r\n\r\n    // Track the original dimensions to use for downloads and raw exports.\r\n    const originalDimensions = useRef({\r\n        width: initialOptions?.layoutOptions?.width || 1000,\r\n        height: initialOptions?.layoutOptions?.height || 1000\r\n    });\r\n\r\n    // --- Compute merged options ---\r\n    // Merge DEFAULT_OPTIONS with user-supplied options and current state (data + file extension).\r\n    const mergedOptions = useMemo(\r\n        () => ({\r\n            ...DEFAULT_OPTIONS,\r\n            ...options?.layoutOptions,\r\n            type: fileExt,\r\n            data: currentData,\r\n            qrOptions: {\r\n                ...DEFAULT_OPTIONS.qrOptions,\r\n                ...options?.qrOptions\r\n            },\r\n            imageOptions: {\r\n                ...DEFAULT_OPTIONS.imageOptions,\r\n                ...options?.imageOptions\r\n            },\r\n            dotsOptions: {\r\n                ...DEFAULT_OPTIONS.dotsOptions,\r\n                ...options?.dotsOptions\r\n            },\r\n            backgroundOptions: {\r\n                ...DEFAULT_OPTIONS.backgroundOptions,\r\n                ...options?.backgroundOptions\r\n            },\r\n            cornersSquareOptions: {\r\n                ...DEFAULT_OPTIONS.cornersSquareOptions,\r\n                ...options?.cornersSquareOptions\r\n            },\r\n            cornersDotOptions: {\r\n                ...DEFAULT_OPTIONS.cornersDotOptions,\r\n                ...options?.cornersDotOptions\r\n            }\r\n        }),\r\n        [options, fileExt, currentData]\r\n    );\r\n\r\n    // --- Event handlers / API exposed to consumers ---\r\n\r\n    // Controlled input change handler for data field\r\n    const onDataChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        setCurrentData(event.target.value);\r\n    }, []);\r\n\r\n    // Directly replace the QR data value\r\n    const updateData = useCallback((newData: string) => {\r\n        setCurrentData(newData);\r\n    }, []);\r\n\r\n    /**\r\n     * Merge and update options. Only the provided sub-sections are merged,\r\n     * preserving previously set option groups.\r\n     *\r\n     * Also updates `originalDimensions` if width/height are provided so\r\n     * downloads/export use the intended size.\r\n     */\r\n    const updateOptions = useCallback((newOptions: Partial<SnapQROptions>) => {\r\n        setOptions((prevOptions) => ({\r\n            ...prevOptions,\r\n            layoutOptions: {\r\n                ...prevOptions.layoutOptions,\r\n                ...newOptions.layoutOptions\r\n            },\r\n            qrOptions: {\r\n                ...prevOptions.qrOptions,\r\n                ...newOptions.qrOptions\r\n            },\r\n            imageOptions: {\r\n                ...prevOptions.imageOptions,\r\n                ...newOptions.imageOptions\r\n            },\r\n            dotsOptions: {\r\n                ...prevOptions.dotsOptions,\r\n                ...newOptions.dotsOptions\r\n            },\r\n            backgroundOptions: {\r\n                ...prevOptions.backgroundOptions,\r\n                ...newOptions.backgroundOptions\r\n            },\r\n            cornersSquareOptions: {\r\n                ...prevOptions.cornersSquareOptions,\r\n                ...newOptions.cornersSquareOptions\r\n            },\r\n            cornersDotOptions: {\r\n                ...prevOptions.cornersDotOptions,\r\n                ...newOptions.cornersDotOptions\r\n            },\r\n            ...newOptions\r\n        }));\r\n\r\n        // Keep download/export dimensions in sync when layout width/height are provided.\r\n        if (newOptions.layoutOptions?.width || newOptions.layoutOptions?.height) {\r\n            originalDimensions.current = {\r\n                width: newOptions.layoutOptions?.width || originalDimensions.current.width,\r\n                height: newOptions.layoutOptions?.height || originalDimensions.current.height\r\n            };\r\n        }\r\n    }, []);\r\n\r\n    // Handler to change the output file extension (svg/png/jpg)\r\n    const onExtensionChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\r\n        setFileExt(event.target.value as FileExtension);\r\n    }, []);\r\n\r\n    /**\r\n     * Download the QR code using the original (export) dimensions.\r\n     * Accepts either a string extension or a partial DownloadOptions object.\r\n     */\r\n    const onDownloadClick = useCallback(\r\n        (downloadOptions?: Partial<DownloadOptions> | string) => {\r\n            try {\r\n                setError(null);\r\n\r\n                // Create a temporary QR instance configured for export size to avoid changing the on-screen responsive instance.\r\n                const downloadQR = async () => {\r\n                    const QRCodeStyling = (await import(\"qr-code-styling\")).default;\r\n                    const tempQr = new QRCodeStyling({\r\n                        ...mergedOptions,\r\n                        width: originalDimensions.current.width,\r\n                        height: originalDimensions.current.height\r\n                    } as Options);\r\n\r\n                    if (typeof downloadOptions === \"string\") {\r\n                        tempQr.download(downloadOptions);\r\n                    } else {\r\n                        tempQr.download({\r\n                            extension: fileExt,\r\n                            ...downloadOptions\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // run the async download\r\n                downloadQR();\r\n            } catch (error) {\r\n                // Keep error state for UI and debugging\r\n                console.error(\"Failed to download QR code:\", error);\r\n                setError(\"Failed to download QR code\");\r\n            }\r\n        },\r\n        [mergedOptions, fileExt]\r\n    );\r\n\r\n    /**\r\n     * Get the raw exported data (Blob or Buffer) using the original export dimensions.\r\n     * Returns null and sets error state on failure.\r\n     */\r\n    const getRawData = useCallback(\r\n        async (extension?: FileExtension): Promise<Blob | Buffer | null> => {\r\n            try {\r\n                setError(null);\r\n\r\n                const QRCodeStyling = (await import(\"qr-code-styling\")).default;\r\n                const tempQr = new QRCodeStyling({\r\n                    ...mergedOptions,\r\n                    width: originalDimensions.current.width,\r\n                    height: originalDimensions.current.height\r\n                } as Options);\r\n\r\n                return await tempQr.getRawData(extension || fileExt);\r\n            } catch (error) {\r\n                console.error(\"Failed to get raw data:\", error);\r\n                setError(\"Failed to get raw data\");\r\n                return null;\r\n            }\r\n        },\r\n        [mergedOptions, fileExt]\r\n    );\r\n\r\n    /**\r\n     * If consumer wants to attach the QR to a different container element,\r\n     * this appends the existing instance to the provided container.\r\n     */\r\n    const appendToContainer = useCallback((container?: HTMLElement) => {\r\n        if (qrCodeRef.current && container) {\r\n            try {\r\n                setError(null);\r\n                container.innerHTML = \"\";\r\n                qrCodeRef.current.append(container);\r\n            } catch (error) {\r\n                console.error(\"Failed to append to container:\", error);\r\n                setError(\"Failed to append to container\");\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    /**\r\n     * Apply a QRCodeStyling extension function to the current instance.\r\n     * See `qr-code-styling` docs for extension shape.\r\n     */\r\n    const applyExtension = useCallback((extension: ExtensionFunction) => {\r\n        if (qrCodeRef.current) {\r\n            try {\r\n                setError(null);\r\n                qrCodeRef.current.applyExtension(extension);\r\n            } catch (error) {\r\n                console.error(\"Failed to apply extension:\", error);\r\n                setError(\"Failed to apply extension\");\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    /**\r\n     * Remove the currently applied extension from the instance.\r\n     */\r\n    const deleteExtension = useCallback(() => {\r\n        if (qrCodeRef.current) {\r\n            try {\r\n                setError(null);\r\n                qrCodeRef.current.deleteExtension();\r\n            } catch (error) {\r\n                console.error(\"Failed to delete extension:\", error);\r\n                setError(\"Failed to delete extension\");\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    // --- Initialization: create QRCodeStyling instance once ---\r\n    useEffect(() => {\r\n        if (isInitialized.current) return;\r\n\r\n        const initQRCode = async () => {\r\n            try {\r\n                setError(null);\r\n                const QRCodeStyling = (await import(\"qr-code-styling\")).default;\r\n                qrCodeRef.current = new QRCodeStyling(mergedOptions as Options);\r\n\r\n                if (containerRef.current) {\r\n                    containerRef.current.innerHTML = \"\";\r\n                    qrCodeRef.current.append(containerRef.current);\r\n                    isInitialized.current = true;\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to initialize QR code:\", error);\r\n                setError(\"Failed to initialize QR code\");\r\n            }\r\n        };\r\n\r\n        initQRCode();\r\n        // Intentionally no dependencies to ensure this runs only once on mount.\r\n        // mergedOptions is intentionally not included here to avoid re-creating the instance.\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    /**\r\n     * Update the on-screen QR code whenever visual options/data change.\r\n     * We remove width/height so the instance remains responsive (size handled by container/resizer).\r\n     */\r\n    useEffect(() => {\r\n        if (!isInitialized.current || !qrCodeRef.current) return;\r\n\r\n        try {\r\n            setError(null);\r\n            const displayOptions = { ...mergedOptions } as Options;\r\n            // Remove explicit size to keep responsiveness\r\n            delete (displayOptions as Partial<Options>).width;\r\n            delete (displayOptions as Partial<Options>).height;\r\n            qrCodeRef.current.update(displayOptions);\r\n        } catch (error) {\r\n            console.error(\"Failed to update QR code:\", error);\r\n            setError(\"Failed to update QR code\");\r\n        }\r\n    }, [mergedOptions]);\r\n\r\n    /**\r\n     * Observe container size and update the QR instance to keep it square & responsive.\r\n     * Uses the smaller of width/height to preserve aspect ratio.\r\n     */\r\n    useEffect(() => {\r\n        if (!containerRef.current) return;\r\n\r\n        const resizeObserver = new ResizeObserver((entries) => {\r\n            for (const entry of entries) {\r\n                const { width, height } = entry.contentRect;\r\n\r\n                if (qrCodeRef?.current && width > 0 && height > 0) {\r\n                    const size = Math.min(width, height);\r\n                    qrCodeRef.current.update({\r\n                        width: size,\r\n                        height: size\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        resizeObserver.observe(containerRef.current);\r\n\r\n        return () => {\r\n            resizeObserver.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    // Minimal presentational component for placing the QR in the app.\r\n    const SnapQRComponent = useCallback<React.FC<{ className?: string }>>(\r\n        ({ className = \"\" }) => (\r\n            <div className={cn(\"snap-qr-container w-full h-full\", className)}>\r\n                {error && <div className='snap-qr-error text-red-500 text-sm bg-red-50 rounded p-2 mb-2'>{error}</div>}\r\n                <div ref={containerRef} className='w-full h-full flex items-center justify-center' />\r\n            </div>\r\n        ),\r\n        [error]\r\n    );\r\n\r\n    // Return stable API for consumers of the hook.\r\n    return useMemo(\r\n        () => ({\r\n            SnapQRComponent,\r\n            fileExt,\r\n            currentData,\r\n            error,\r\n            qrCodeInstance: qrCodeRef.current,\r\n            onDataChange,\r\n            onExtensionChange,\r\n            onDownloadClick,\r\n            updateData,\r\n            updateOptions,\r\n            applyExtension,\r\n            deleteExtension,\r\n            getRawData,\r\n            appendToContainer,\r\n            originalDimensions: originalDimensions.current // exposed for debugging/advanced use\r\n        }),\r\n        [\r\n            SnapQRComponent,\r\n            fileExt,\r\n            currentData,\r\n            error,\r\n            onDataChange,\r\n            onExtensionChange,\r\n            onDownloadClick,\r\n            updateData,\r\n            updateOptions,\r\n            applyExtension,\r\n            deleteExtension,\r\n            getRawData,\r\n            appendToContainer\r\n        ]\r\n    );\r\n}\r\n",
      "type": "registry:hook",
      "target": "components/ui/SnapQR.tsx"
    }
  ],
  "docs": "https://github.com/sutarrohit/snap-qr#readme"
}